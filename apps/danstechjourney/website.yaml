apiVersion: v1
kind: Namespace
metadata:
  name: danstechjourney
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: website-svc
  namespace: danstechjourney
---
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: cloudflare-spc
  namespace: danstechjourney
spec:
  provider: vault     
  secretObjects:
  - secretName: cloudflare-api-token
    type: Opaque
    data: 
    - objectName: cloudflare-api-key
      key: cloudflare-api-key                      
  parameters:                                 
    roleName: "${cluster_name}-danstechjourney-website-svc-cloudflare-api"
    vaultAddress: "http://vault.vault.svc.cluster.local:8200"
    objects:  |
      - secretPath: "k8s-${cluster_name}/kubernetes-${cluster_name}-cert-manager-cloudflare"
        objectName: "cloudflare-api-key"
        secretKey: "cloudflare-api-token"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: website
  name: website
  namespace: danstechjourney
spec:
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: website
  template:
    metadata:
      labels:
        app: website
    spec:
      containers:
      - image: ${image}:${image_tag}
        imagePullPolicy: Always
        name: danstechjourney
        ports:
        - containerPort: 80
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 5
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: secret-bind
  name: secret-bind
  namespace: danstechjourney
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: secret-bind
  template:
    metadata:
      labels:
        app: secret-bind
    spec:
      serviceAccountName: website-svc
      containers:
      - image: alpine
        name: alpine
        command:
        - sleep
        - infinity
        volumeMounts:
        - name: secrets-store-inline
          mountPath: "/secrets"
          readOnly: true
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      volumes:
      - name: secrets-store-inline
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: "cloudflare-spc"
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: website
  namespace: danstechjourney
spec:
  maxReplicas: 10
  minReplicas: 3
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: website
  targetCPUUtilizationPercentage: 80
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: website
  name: website
  namespace: danstechjourney
spec:
  ports:
  - name: 8080-80
    port: 8080
    protocol: TCP
    targetPort: 80
  selector:
    app: website
  type: ClusterIP
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: danstechjourney-tls
  namespace: danstechjourney
spec:
  # Secret names are always required.
  secretName: danstechjourney-tls

  duration: 2160h # 90d
  renewBefore: 360h # 15d

  isCA: false

  subject:
    organizations:
      - cert-manager

  commonName: ${domain}

  dnsNames:
    - ${domain}

  issuerRef:
    name: cloudflare-issuer
    kind: ClusterIssuer
    group: cert-manager.io
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: website
  namespace: danstechjourney
  annotations:
    nginx.ingress.kubernetes.io/connection-proxy-header: keep-alive
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/limit-connections: "25"
    nginx.ingress.kubernetes.io/limit-rps: "15"
    nginx.ingress.kubernetes.io/proxy-body-size: 1024m
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "1800"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "1800"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  ingressClassName: nginx
  rules:
  - host: ${domain}
    http:
      paths:
      - backend:
          service:
            name: website
            port:
              number: 8080
        path: /
        pathType: Prefix
  tls:
    - hosts:
      - ${domain}
      secretName: danstechjourney-tls
---
apiVersion: image.toolkit.fluxcd.io/v1beta2
kind: ImageRepository
metadata:
  name: danstechjourney
  namespace: flux-system
spec:
  image: registry.registry:5000/danstechjourney 
  interval: 5m
  insecure: true
---
apiVersion: image.toolkit.fluxcd.io/v1beta2
kind: ImagePolicy
metadata:
  name: danstechjourney
  namespace: flux-system
spec:
  imageRepositoryRef:
    name: danstechjourney
  policy:
    numerical:
      order: asc
---
apiVersion: image.toolkit.fluxcd.io/v1beta2
kind: ImageUpdateAutomation
metadata:
  name: flux-system
  namespace: flux-system
spec:
  interval: 30m
  sourceRef:
    kind: GitRepository
    name: flux-system
  git:
    checkout:
      ref:
        branch: main
    commit:
      author:
        email: fluxcdbot@users.noreply.github.com
        name: fluxcdbot
      messageTemplate: '{{range .Changed.Changes}}{{print .OldValue}} -> {{println .NewValue}}{{end}}'
    push:
      branch: main
  update:
    path: ./clusters/${cluster_name}
    strategy: Setters
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: secret-bind
  namespace: danstechjourney
spec:
  podSelector:
    matchLabels:
      app: secret-bind
  policyTypes:
  - Ingress
---
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  namespace: danstechjourney
  name: website
spec:
  podSelector:
    matchLabels:
      app: website
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
      - namespaceSelector:
          matchLabels:
            kubernetes.io/metadata.name: ingress-nginx
        podSelector:
          matchLabels:
            app.kubernetes.io/name: ingress-nginx
            app.kubernetes.io/component: controller
    ports:
    - protocol: TCP
      port: 80
  egress: 
  - {}
  # - to:
  #     - namespaceSelector:
  #         matchLabels:
  #           kubernetes.io/metadata.name: ingress-nginx
  #           app.kubernetes.io/name: ingress-nginx
  #           app.kubernetes.io/component: controller